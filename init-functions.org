* 包管理函数
  #+BEGIN_SRC emacs-lisp
    ;; 加载源
    (require 'package)
    (package-initialize)
    (setq package-archives
          '(("melpa-cn" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
            ("org-cn"   . "http://mirrors.tuna.tsinghua.edu.cn/elpa/org/")
            ("gnu-cn" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")))

    ;; cl - Common Lisp Extension
    (require 'cl)
    (defvar chongliang/packages '(
                                  company
                                  monokai-theme
                                  hungry-delete
                                  swiper
                                  counsel
                                  smartparens
                                  exec-path-from-shell
                                  popwin
                                  expand-region
                                  iedit
                                  evil
                                  evil-leader
                                  evil-surround
                                  evil-nerd-commenter
                                  window-numbering
                                  which-key
                                  helm-ag
                                  yasnippet
                                  auto-yasnippet
                                  ess
                                  polymode
                                  r-autoyas
                                  flycheck
                                  markdown-mode
                                  auto-complete
                                  bash-completion
                                  chinese-pyim
                                  mwim
                                  electric-operator
                                  anaconda-mode
                                  company-anaconda
                                  isend
                                  ein                    ;; emacs ipython notebook
                                  pangu-spacing
                                  zotxt
                                  ) "Default packages")

    (setq package-selected-packages chongliang/packages)

    (defun chongliang/packages-installed-p ()
      (loop for pkg in chongliang/packages
            when (not (package-installed-p pkg)) do (return nil)
            finally (return t)))
  #+END_SRC
* 快速打开配置文件
  #+BEGIN_SRC emacs-lisp
    (defun open-init-file()
    (interactive)
    (find-file "~/.emacs.d/my.configs.org"))
  #+END_SRC
* openGTD
  #+BEGIN_SRC emacs-lisp
    (defun open-GTD()
    (interactive)
    (find-file "~/GTD/GTD.org"))
  #+END_SRC
* 自动缩进函数
  #+BEGIN_SRC emacs-lisp
    (defun indent-buffer ()
      "Indent the currently visited buffer."
      (interactive)
      (indent-region (point-min) (point-max)))

    (defun indent-region-or-buffer ()
      "Indent a region if selected, otherwise the whole buffer. "
      (interactive)
      (save-excursion
        (if (region-active-p)
            (progn
              (indent-region (region-beginning) (region-end))
              (message "Indented selected region."))
          (progn
            (indent-buffer)
    (message "Indented buffer.")))))
  #+END_SRC
* occur-dwim
  #+BEGIN_SRC emacs-lisp
    (defun occur-dwim ()
      "Call `occur' with a sane default.occur 自动匹配光标所在词"
      (interactive)
      (push (if (region-active-p)
                (buffer-substring-no-properties
                 (region-beginning)
                 (region-end))
              (let ((sym (thing-at-point 'symbol)))
                (when (stringp sym)
                  (regexp-quote sym))))
            regexp-history)
      (call-interactively 'occur))
  #+END_SRC
* chongliang/org-to-elc
  #+BEGIN_SRC emacs-lisp
    (add-hook 'org-mode-hook
              '(lambda ()
                 (defun chongliang/org-to-elc ()
                   (interactive)
                   (setq-local filename (string= (substring (buffer-file-name) 0 26) "/home/chongliang/.emacs.d/"))
                   (if filename
                       (progn
                         (save-buffer)
                         (org-babel-load-file (buffer-file-name))
                         (byte-compile-file
                          (concat
                           (substring (buffer-file-name) 0 (string-match "\\(.org\\)" (buffer-file-name)))
                           ".el")))))
                 ))

  #+END_SRC
* chongliang/ess-eval-line-or-region
  used in：file:~/.emacs.d/init-packages.org::ESS
  #+BEGIN_SRC emacs-lisp
    (add-hook 'ess-mode-hook
              '(lambda()
                 (defun chongliang/ess-eval-line-or-region (&optional vis)
                   "Evaluate region if there is an active one, otherwise the current line. Prefix arg VIS toggles visibility of ess-code when evaluating the region (as for `ess-eval-region') and has no effect for evaluation of the line. If evaluate the last line, creat a new line"
                   (interactive "P")
                   (if (and transient-mark-mode mark-active ;; xemacs doesn't have use-region-p
                            (> (region-end) (region-beginning)))
                       (ess-eval-region (region-beginning) (region-end) vis)
                     (if (= (point-at-eol) (point-max))
                         (progn
                           (ess-eval-line)
                           (move-end-of-line 1)
                           (newline-and-indent))
                       (ess-eval-line-and-step))))
                 )
              )
  #+END_SRC
* chongliang/timestamp
  #+BEGIN_SRC emacs-lisp
    (defun chongliang/timestamp ()
      (interactive)
      (insert (format-time-string "%Y-%m-%d %H:%M:%S")))
  #+END_SRC
* chongliang/cpp-ctrl-return
  #+BEGIN_SRC emacs-lisp
    (add-hook 'c++-mode-hook
              '(lambda ()
                 (defun chongliang/cpp-ctrl-return ()
                   (interactive)
                   (insert ";")
                   (newline-and-indent))
                 ))
  #+END_SRC
* chongliang/org-insert-src-block
  #+BEGIN_SRC emacs-lisp
    (add-hook 'org-mode-hook
              '(lambda ()
                 (defun chongliang/org-insert-src-block (src-code-type)
                   "Insert a `SRC-CODE-TYPE' type source code block in org-mode."
                   (interactive
                    (let ((src-code-types
                           '("emacs-lisp" "python" "C" "sh" "java" "js" "clojure" "C++" "css"
                             "calc" "asymptote" "dot" "gnuplot" "ledger" "lilypond" "mscgen"
                             "octave" "oz" "plantuml" "R" "sass" "screen" "sql" "awk" "ditaa"
                             "haskell" "latex" "lisp" "matlab" "ocaml" "org" "perl" "ruby"
                             "scheme" "sqlite" "shell")))
                      (list (ido-completing-read "Source code type: " src-code-types))))
                   (progn
                     (newline-and-indent)
                     (insert (format "#+BEGIN_SRC %s\n" src-code-type))
                     (newline-and-indent)
                     (insert "#+END_SRC\n")
                     (previous-line 2)
                     (org-edit-src-code)
                     (evil-insert 1)))
                 ))
  #+END_SRC
* chongliang/isend-shell
  #+BEGIN_SRC emacs-lisp
    (defun chongliang/isend-shell (shell-type)
      (interactive
       (let ((shell-types
              '("shell" "python" "python3")))
         (list (ido-completing-read "Shell type: " shell-types))))
      (progn
        (delete-other-windows)
        (cond ((string= shell-type "shell")
               (ansi-term "/bin/bash" "shell"))
              ((string= shell-type "python")
               (ansi-term "/usr/bin/python" "python"))
              ((string= shell-type "python3")
               (ansi-term "/usr/bin/python3" "python3"))
              (t "Wrong shell-type")
              )
        (split-window-right)
        (mode-line-other-buffer)
        (isend (concat "*" shell-type "*"))
        ))
  #+END_SRC
* chongliang/chinese-pyim-shift-space
  详见：file:~/.emacs.d/init-packages.org::chinese-pyim-shift-space
* chongliang/render-rmd
  #+BEGIN_SRC emacs-lisp
    (add-hook 'ess-mode-hook
              '(lambda ()
                 (defun chongliang/render-rmd ()
                   (interactive)
                   (save-buffer)
                   (let (file-name file-name2)
                     (setq file-name (buffer-file-name))
                     (setq file-name-2 (substring file-name 0 (- (length file-name) 4)))
                     (save-window-excursion
                       (ess-switch-to-ESS t)
                       (insert (format "rmarkdown::render(\"%s\")" file-name))
                       (inferior-ess-send-input)
                       (ess-wait-for-process)
                       (end-of-buffer)
                       (cond ((re-search-backward ".pdf" (- (point-max) 50) t)
                              (shell-command (format "firefox %s.pdf" file-name-2)))
                             ((re-search-backward ".html" (- (point-max) 50) t)
                              (shell-command (format "firefox %s.html" file-name-2)))
                             (t (message "error in rendering"))))))
                 ))


  #+END_SRC
* chongliang/screenshot
  #+BEGIN_SRC emacs-lisp
    (defun chongliang/screenshot (prfx)
      "if prfx is nil, emacs is invisible while screenshot. else is visible."
      ;; (interactive)
      (let (
            ;; file name output: file name and the current date and time.
            (filename (concat (buffer-name)
                              (format-time-string " %Y-%m-%d %H%M%S.png")))
            ;; type of editing file
            (extensionname (file-name-extension (buffer-file-name)))
            pathname scrfilename linkfilename status)
        ;; the path of output
        ;; (setq pathname (concat "~/Pictures/myscreenshots/"
        ;;                        extensionname
        ;;                        "/"
        ;;                        (file-name-base)
        ;;                        "/"))
        (setq pathname (concat (file-name-directory (buffer-file-name))
                               "Screenshots"
                               "/"))
        ;; if the path isn't exist create it
        (unless (file-exists-p pathname)
          (dired-create-directory pathname))
        (setq scrfilename (concat pathname filename))
        ;; arg of import to setting output file
        (setq linkfilename (convert-standard-filename  (expand-file-name scrfilename)))
        ;; if prfx is nil, meke emacs invisible
        (unless prfx (make-frame-invisible nil t))
        ;; newline and indent
        (newline-and-indent)
        ;; run import to screenshot
        (setq status (apply 'call-process "import" nil nil nil (list linkfilename)))
        ;; if prfx is nil, make emacs visible after screenshot
        (unless prfx (make-frame-visible))
        ;; whether screenshot is success or not
        (unless (equal status 0)
          (error "screenshot command exited with status %d: %s" status
                 (mapconcat 'identity (cons "import" (list linkfilename)) " ")))
        (message "wrote screenshot to %s" linkfilename)
        ;; insert screenshot depend on file type
        (cond ((equal extensionname "org")
               (progn (insert (concat "[[file:" linkfilename "]]"))
                      (org-display-inline-images nil t)))
              )
        (newline-and-indent)))
  #+END_SRC
** chongliang/screenshot-outside
   #+BEGIN_SRC emacs-lisp
     (defun chongliang/screenshot-outside ()
       (interactive)
       (chongliang/screenshot nil))
   #+END_SRC
** chongliang/screenshot-inside
   #+BEGIN_SRC emacs-lisp
     (defun chongliang/screenshot-inside ()
       (interactive)
       (chongliang/screenshot t))
   #+END_SRC
* chongliang/org-create
  #+BEGIN_SRC emacs-lisp
    (defun chongliang/org-create (chongliang/org-create-filename)
      (interactive "sfilename: ")
      (unless (equal (file-name-extension chongliang/org-create-filename) "org")
        (setq chongliang/org-create-filename (concat chongliang/org-create-filename ".org")))
      (let ((chongliang/org-create-path (concat "~/Documents/org/" chongliang/org-create-filename)))
        (if (file-exists-p chongliang/org-create-path)
            (find-file (concat chongliang/org-create-path "/" chongliang/org-create-filename))
          (dired-create-directory chongliang/org-create-path)
          (find-file (concat chongliang/org-create-path "/" chongliang/org-create-filename))
          (insert "header")
          (yas-expand)
          (message "create %s" (buffer-file-name)))))
  #+END_SRC
  
* chongliang/dict-youdao
  #+BEGIN_SRC emacs-lisp
    (defun chongliang/dict-youdao (query)
      "Show the explanation of QUERY from Youdao dictionary."
      (interactive
       (let* ((string (or (if (use-region-p)
                              (buffer-substring
                               (region-beginning) (region-end))
                            (thing-at-point 'word))
                          (read-string "Search Youdao Dictionary: " nil 'youdao-dictionary-history))))
         (list string)))
      (switch-to-buffer-other-window (eww (concat "http://www.youdao.com/w/" query))))
  #+END_SRC
