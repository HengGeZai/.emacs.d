* 包管理函数
  #+BEGIN_SRC emacs-lisp
    ;; 加载源
    (when (>= emacs-major-version 24)
        (require 'package)
        (package-initialize)
        (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t))

    ;; cl - Common Lisp Extension
    (require 'cl)
    (defvar chongliang/packages '(
                     company
                     monokai-theme
                     hungry-delete
                     swiper
                     counsel
                     smartparens
                     exec-path-from-shell
                     popwin
                     expand-region
                     iedit
                     evil
                     evil-leader
                     evil-surround
                     evil-nerd-commenter
                     window-numbering
                     which-key
                     helm-ag
                     yasnippet
                     auto-yasnippet
                     ess
                     polymode
                     r-autoyas
                     flycheck
                     markdown-mode
                     auto-complete
                     bash-completion
                     chinese-pyim
                     mwim
                     electric-operator
                     anaconda-mode
                     company-anaconda
                   ) "Default packages")

    (setq package-selected-packages chongliang/packages)

    (defun chongliang/packages-installed-p ()
        (loop for pkg in chongliang/packages
              when (not (package-installed-p pkg)) do (return nil)
              finally (return t)))
  #+END_SRC
* 快速打开配置文件
  #+BEGIN_SRC emacs-lisp
    (defun open-init-file()
    (interactive)
    (find-file "~/.emacs.d/my.configs.org"))
  #+END_SRC
* openGTD
  #+BEGIN_SRC emacs-lisp
    (defun open-GTD()
    (interactive)
    (find-file "~/GTD/GTD.org"))
  #+END_SRC
* 自动缩进函数
  #+BEGIN_SRC emacs-lisp
    (defun indent-buffer ()
      "Indent the currently visited buffer."
      (interactive)
      (indent-region (point-min) (point-max)))

    (defun indent-region-or-buffer ()
      "Indent a region if selected, otherwise the whole buffer. "
      (interactive)
      (save-excursion
        (if (region-active-p)
            (progn
              (indent-region (region-beginning) (region-end))
              (message "Indented selected region."))
          (progn
            (indent-buffer)
    (message "Indented buffer.")))))
  #+END_SRC
* occur自动匹配光标所在词-occur-dwim
  #+BEGIN_SRC emacs-lisp
    (defun occur-dwim ()
      "Call `occur' with a sane default."
      (interactive)
      (push (if (region-active-p)
                (buffer-substring-no-properties
                 (region-beginning)
                 (region-end))
              (let ((sym (thing-at-point 'symbol)))
                (when (stringp sym)
                  (regexp-quote sym))))
            regexp-history)
      (call-interactively 'occur))
  #+END_SRC
* 将org编译成elc
  #+BEGIN_SRC emacs-lisp
    (defun chongliang/org-to-elc ()
      (interactive)
      (setq-local filename (string= (substring (buffer-file-name) 0 26) "/home/chongliang/.emacs.d/"))
      (if filename
          (progn
<<<<<<< HEAD
            (save-buffer)
            (org-babel-load-file (buffer-file-name))
            (byte-compile-file
             (concat
<<<<<<< HEAD
              (substring (buffer-file-name) 0 (string-match "\\(.org\\)" (buffer-file-name)))
              ".el")))))
=======
              (substring (buffer-file-name) 0 (string-match "\\(.org\\)" (buffer-file-name))) ".el")))))
=======
            (org-babel-load-file (buffer-file-name))
        (byte-compile-file
         (concat
          (substring (buffer-file-name) 0 (string-match "\\(.org\\)" (buffer-file-name))) ".el")))))
>>>>>>> a9b27910f49c9516c77712e443ab9c1d0d11086a
>>>>>>> e00dbb1c2a7529489fb4dd15b626174a79eaca50
  #+END_SRC
* newline-at-last-line
  used in：file:~/.emacs.d/init-packages.org::ESS
  #+BEGIN_SRC emacs-lisp
    (defun chongliang/newline-at-last-line ()
      (interactive)
      (let (fpoint lpoint end)
        (save-excursion
          (forward-page)
          (setq end (point)))
        (move-beginning-of-line 1)
        (setq fpoint (point))
        (move-end-of-line 1)
        (setq lpoint (point))
        (if (and
             (= 1 (count-lines fpoint end))
             (= 0 (count-lines lpoint end)))
            (progn
              (ess-eval-line)
              (newline)))))
  #+END_SRC
* chongliang/timestamp
  #+BEGIN_SRC emacs-lisp
    (defun chongliang/timestamp ()
      (interactive)
      (insert (format-time-string "%Y-%m-%d %H:%M:%S")))
  #+END_SRC
* chongliang/cpp-ctrl-return
  #+BEGIN_SRC emacs-lisp
    (defun chongliang/cpp-ctrl-return ()
      (interactive)
      (insert ";")
      (newline-and-indent))
  #+END_SRC
