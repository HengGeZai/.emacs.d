* 这一行代码，将函数 open-init-file 绑定到 <f2> 键上
  file:~/.emacs.d/init-functions.org::快速打开配置文件
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "<f2>") 'open-init-file)
  #+END_SRC
* open-GTD绑定到<f3>
  file:~/.emacs.d/init-functions.org::openGTD
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "<f3>") 'open-GTD)
  #+END_SRC
* 打开最近浏览过的文件
  #+BEGIN_SRC emacs-lisp
    (global-set-key "\C-x\ \C-r" 'recentf-open-files)
  #+END_SRC
* 函数、变量、快捷键的帮助
  #+BEGIN_SRC emacs-lisp
    ;; function
    (global-set-key (kbd "C-h C-f") 'find-function)
    ;; variable
    (global-set-key (kbd "C-h C-v") 'find-variable)
    ;; key
    (global-set-key (kbd "C-h C-k") 'find-function-on-key)
  #+END_SRC
* 自动缩进
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-M-\\") 'indent-region-or-buffer)
  #+END_SRC
* counsel
   #+BEGIN_SRC emacs-lisp
     ;; M-x
     (global-set-key (kbd "M-x") 'counsel-M-x)
     ;; find-file
     (global-set-key (kbd "C-x C-f") 'counsel-find-file)
     ;; describe-function
     (global-set-key (kbd "C-h f") 'counsel-describe-function)
     ;; describe-variable
     (global-set-key (kbd "C-h v") 'counsel-describe-variable)
     ;; imenu
     (global-set-key (kbd "M-s i") 'counsel-imenu)
     ;; git
     (global-set-key (kbd "C-c p f") 'counsel-git)
   #+END_SRC
* expand-region
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-=") 'er/expand-region)
    (global-set-key (kbd "C--") 'er/contract-region)
  #+END_SRC
* org
  #+BEGIN_SRC emacs-lisp
    ;; Agenda
    (global-set-key (kbd "C-c a") 'org-agenda)
  #+END_SRC
* hipple-expand（emacs自带的补全功能，补充comany的不足）
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "s-/") 'hippie-expand) ;; s为windows键
  #+END_SRC
* dired-mode
  #+BEGIN_SRC emacs-lisp
    ;; 用于dired-mode时不会不断新建buffer
    (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
  #+END_SRC
* orrur-mode
  file:~/.emacs.d/init-functions.org::occur自动匹配光标所在词-occur-dwim
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-s o") 'occur-dwim)
  #+END_SRC
* 删除最后输入的一个单词
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-w") 'backward-kill-word)
  #+END_SRC
* company-mode
  #+BEGIN_SRC emacs-lisp
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (define-key company-active-map (kbd "C-<tab>") #'company-abort)
  #+END_SRC
* Evil-nerd-commenter
  #+BEGIN_SRC emacs-lisp
    ;; (evilnc-default-hotkeys)
    ;; 设置一般模式和选择模式下的注释快捷键
    (define-key evil-normal-state-map (kbd ",/") 'evilnc-comment-or-uncomment-lines)
    (define-key evil-visual-state-map (kbd ",/") 'evilnc-comment-or-uncomment-lines)
  #+END_SRC
* helm-ag
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c p s") 'helm-do-ag-project-root)
  #+END_SRC
* auto-yasnippet
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "H-w") #'aya-create)
    (global-set-key (kbd "H-y") #'aya-expand)
  #+END_SRC
* ESS
  #+BEGIN_SRC emacs-lisp
    ;; set ess assign key
    (add-hook 'ess-mode-hook
              '(lambda()
                 (setq ess-S-assign-key (kbd "M--"))
                 (ess-toggle-S-assign-key t) ; enable above key definition
                 ;; leave my underscore key alone!
                 (ess-toggle-underscore nil)))
  #+END_SRC
* r-autoyas
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "<f4>") 'r-autoyas-expand)
  #+END_SRC
* hungry-mode
  #+BEGIN_SRC emacs-lisp
    ;; chonglaing/newline-return
    (defun chongliang/newline-return()
      (save-excursion
        (funcall #'newline)))
    ;; give advice
    (advice-add 'hungry-delete-backward-impl :after-until #'chongliang/newline-return)
    (advice-add 'hungry-delete-forward-impl :after-until #'chongliang/newline-return)
    ;; global-set-key
    (global-set-key (kbd "S-<backspace>") 'hungry-delete-backward)
    (global-set-key (kbd "S-<delete>") 'hungry-delete-forward)
    (define-key evil-normal-state-map (kbd "S-<backspace>") 'hungry-delete-backward)
    (define-key evil-normal-state-map (kbd "S-<delete>") 'hungry-delete-forward)
  #+END_SRC
* Evil-mode
  #+BEGIN_SRC emacs-lisp
    (define-key evil-insert-state-map (kbd "C-y") 'evil-paste-after)
  #+END_SRC
* iedit-mode
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-;") 'iedit-mode)
  #+END_SRC
