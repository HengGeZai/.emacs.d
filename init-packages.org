* 设置需要安装的包
  file:~/.emacs.d/init-functions.org::包管理函数
* Company
  快捷键设置：
  file:~/.emacs.d/init-keybindings.org::company-mode
#+BEGIN_SRC emacs-lisp
  ;; 开启全局 Company 补全
  (global-company-mode 1)
  ;; 设置从1个字符开始补全，延时为0.01秒
  (setq company-minimum-prefix-length 1)
  (setq company-idle-delay 0.3)
#+END_SRC
* smartparens
  #+BEGIN_SRC emacs-lisp
    ;; 全局匹配符号
    (smartparens-global-strict-mode)
    ;; 全局显示配对符号
    (show-smartparens-global-mode)
    ;; smartparens config in different mode.
    ;; such as remove pair of quote(') in emacs-lisp-mode
    (require 'smartparens-config)
    (setq sp-show-pair-delay 0)
  #+END_SRC
* monokai-theme
  #+BEGIN_SRC emacs-lisp
    (load-theme 'monokai 1)
  #+END_SRC
* hungry-delete
  #+BEGIN_SRC emacs-lisp
    (global-hungry-delete-mode)
  #+END_SRC
* ivy-mode
  #+BEGIN_SRC emacs-lisp
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
  #+END_SRC
* popwin-mode
  #+BEGIN_SRC emacs-lisp
    (require 'popwin)
    (popwin-mode t)
  #+END_SRC
* org-mode
  #+BEGIN_SRC emacs-lisp
    (require 'org)
    ;; 代码高亮
    (setq org-src-fontify-natively t)
    ;; agenda目录
    (setq org-agenda-files '("~/GTD"))
    ;; 自动折行
    (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))
    ;; 记录当一个Item标记为Done的时间并添加备注
    (setq org-log-done 'time)
    ;;; (setq org-log-done 'note)
    ;; orgcapture(旧org-remenber)模式设置
    (setq org-default-notes-file (concat org-directory "/GTD/notes.org"))
    (define-key global-map [f12] 'org-capture)
    (setq org-capture-templates
          '(("w" "Work-Tasks-TODO"     entry (file+headline "~/GTD/Work.org" "Tasks")     "* TODO %?\n  %i\n  %T")
            ("h" "Home-Tasks-TODO"     entry (file+headline "~/GTD/Home.org" "Tasks")     "* TODO %?\n  %i\n  %T")
            ("f" "Finacy-Tasks-TODO"   entry (file+headline "~/GTD/Finacy.org" "Tasks")   "* TODO %?\n  %i\n  %T")
            ("p" "Personal-Tasks-TODO" entry (file+headline "~/GTD/Personal.org" "Tasks")  "* TODO %?\n  %i\n  %T")
            ("c" "Computer-Tasks-TODO" entry (file+headline "~/GTD/Computer.org" "Tasks") "* TODO %?\n  %i\n  %T")
            ))
    ;; 添加Babel编译的语言
    (org-babel-do-load-languages
          'org-babel-load-languages
          '((python . t)
            (R . t)))
  #+END_SRC
* window-numbering
  #+BEGIN_SRC emacs-lisp
    (window-numbering-mode 1)
  #+END_SRC
* Evil-mode
  快捷键：file:~/.emacs.d/init-keybindings.org::Evil-mode
  #+BEGIN_SRC emacs-lisp
    (evil-mode 1)
  #+END_SRC
* evil-leader
   #+BEGIN_SRC emacs-lisp
     ;; 开启evil-leader模式
     (global-evil-leader-mode)

     ;; leader-key
     (evil-leader/set-leader "<SPC>")

     ;; 设置快捷键
     (evil-leader/set-key
       "ff" 'find-file
       "bb" 'switch-to-buffer
       "0"  'select-window-0
       "1"  'select-window-1
       "2"  'select-window-2
       "3"  'select-window-3
       "w/" 'split-window-right
       "w-" 'split-window-below
       ":"  'counsel-M-x
       "wM" 'delete-other-windows
       )
   #+END_SRC
* evil-surround
  #+BEGIN_SRC emacs-lisp
    (require 'evil-surround)
    (global-evil-surround-mode)
  #+END_SRC
* Evil-nerd-commenter
  快捷键：file:~/.emacs.d/init-keybindings.org::Evil-nerd-commenter
* which-key
  #+BEGIN_SRC emacs-lisp
    (which-key-mode 1)
  #+END_SRC
* helm-ag
  快捷键：file:~/.emacs.d/init-keybindings.org::helm-ag
* yasnippet
  #+BEGIN_SRC emacs-lisp
    (require 'yasnippet)
    (yas-global-mode 1)
  #+END_SRC
* auto-yasnippet
  快捷键：file:~/.emacs.d/init-keybindings.org::auto-yasnippet
* r-autoyas
  #+BEGIN_SRC emacs-lisp
    (require 'r-autoyas)
    (add-hook 'ess-mode-hook
              '(lambda()
                 ;; 保留参数名称
                 (setq r-autoyas-remove-explicit-assignments nil)
                 ;; 多少个参数后，每个参数折行
                 (setq r-autoyas-number-of-commas-before-return 10)
                 ;; (setq r-autoyas-auto-expand-with-paren t)
                 ;; 调用r-autoyas
                 'r-autoyas-ess-activate))
  #+END_SRC

* ESS
  快捷键：file:~/.emacs.d/init-keybindings.org::-yasnippet
  #+BEGIN_SRC emacs-lisp
    (add-hook 'ess-mode-hook
              '(lambda()
                 (add-hook 'write-file-functions
                           (lambda ()
                             (ess-nuke-trailing-whitespace)))
                 (setq ess-nuke-trailing-whitespace-p t)
                 (setq ess-smart-operators t)))
  #+END_SRC
** ess assign key
   file:~/.emacs.d/init-keybindings.org::ESS
** inferior-ess-mode
   #+BEGIN_SRC emacs-lisp
     (add-hook 'inferior-ess-mode-hook 'electric-spacing-mode)
   #+END_SRC
* ploymode
  #+BEGIN_SRC emacs-lisp
    (require 'poly-R)
    (require 'poly-markdown)
    (add-to-list 'auto-mode-alist '("\\.Rmd" . poly-markdown+r-mode))
  #+END_SRC
* flycheck
  #+BEGIN_SRC emacs-lisp
    (global-flycheck-mode)
  #+END_SRC
* markdown-mode
  #+BEGIN_SRC emacs-lisp
    (autoload 'markdown-mode
      "markdown-mode" "Major mode for editing Markdown files" t)
    (add-to-list 'auto-mode-alist'("'\.markdown\'" . markdown-mode))
    (add-to-list 'auto-mode-alist'("'\.md\'" . markdown-mode))
  #+END_SRC
* bash-completion
  #+BEGIN_SRC emacs-lisp
    (autoload 'bash-completion-dynamic-complete 
      "bash-completion"
      "BASH completion hook")
    (add-hook 'shell-dynamic-complete-functions
      'bash-completion-dynamic-complete)
  #+END_SRC
