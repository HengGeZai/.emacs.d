* 设置需要安装的包
  file:~/.emacs.d/init-functions.org::包管理函数
* Company
  快捷键设置：
  file:~/.emacs.d/init-keybindings.org::company-mode
#+BEGIN_SRC emacs-lisp
  ;; 开启全局 Company 补全
  ;; (global-company-mode 1)
  ;; 设置从1个字符开始补全，延时为0.01秒
  ;; (setq company-minimum-prefix-length 1)
  ;; (setq company-idle-delay 0.3)
#+END_SRC
* auto-company
  #+BEGIN_SRC emacs-lisp
    (ac-config-default)
    (setq ac-auto-start 2)
    (setq ac-delay 0.1)
    (setq ac-quick-help-delay 3)
    (define-key ac-completing-map "\M-n" nil) ;; was ac-next
    (define-key ac-completing-map "\M-p" nil) ;; was ac-previous
    (define-key ac-completing-map "\C-n" 'ac-next)
    (define-key ac-completing-map "\C-p" 'ac-previous)
  #+END_SRC
* smartparens
  #+BEGIN_SRC emacs-lisp
    ;; 全局匹配符号
    (smartparens-global-strict-mode)

    ;; smartparens config in different mode.
    ;; such as remove pair of quote(') in emacs-lisp-mode
    (require 'smartparens-config)

    ;; add new pair
    ;; chinese pair
    (sp-pair "“" "”")
    (sp-pair "《" "》")
    (sp-pair "（" "）")
  #+END_SRC
* show-paren-mode
  #+BEGIN_SRC emacs-lisp
    ;; 全局显示配对符号
    (show-paren-mode)

    (setq show-paren-delay 0)

    ;; (setq show-paren-style 'expression)

    ;; Highlight parens
    (defadvice show-paren-function (around fix-show-paren-function activate)
      "Highlight enclosing parens."
      (cond ((looking-at-p "\\s(") ad-do-it)
            (t (save-excursion
                 (ignore-errors (backward-up-list))
                 ad-do-it))))
  #+END_SRC
* monokai-theme
  #+BEGIN_SRC emacs-lisp
    (load-theme 'monokai 1)
  #+END_SRC
* hungry-delete
  #+BEGIN_SRC emacs-lisp
    (global-hungry-delete-mode)
  #+END_SRC
* ivy-mode
  #+BEGIN_SRC emacs-lisp
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
  #+END_SRC
* popwin-mode
  #+BEGIN_SRC emacs-lisp
    (require 'popwin)
    (popwin-mode t)
  #+END_SRC
* org-mode
  #+BEGIN_SRC emacs-lisp
    (require 'org)
    (add-hook 'org-mode-hook (lambda ()
                               ;; 代码高亮
                               (setq org-src-fontify-natively t)
                               ;; agenda目录
                               (setq org-agenda-files '("~/GTD"))
                               ;; 自动折行
                               (setq truncate-lines nil)
                               ;; keybinding for inserting code blocks
                               (local-set-key (kbd "C-c s")
                                              'chongliang/org-insert-src-block)
                               ;; 记录当一个Item标记为Done的时间并添加备注
                               (setq org-log-done 'time)
                               ;; (setq org-log-done 'note)
                               ;; orgcapture(旧org-remenber)模式设置
                               (setq org-default-notes-file (concat org-directory "/GTD/notes.org"))
                               (define-key global-map [f12] 'org-capture)
                               (setq org-capture-templates
                                     '(("w" "Work-Tasks-TODO"     entry (file+headline "~/GTD/Work.org" "Tasks")     "* TODO %?\n  %i  %T")
                                       ("h" "Home-Tasks-TODO"     entry (file+headline "~/GTD/Home.org" "Tasks")     "* TODO %?\n  %i  %T")
                                       ("f" "Finacy-Tasks-TODO"   entry (file+headline "~/GTD/Finacy.org" "Tasks")   "* TODO %?\n  %i  %T")
                                       ("p" "Personal-Tasks-TODO" entry (file+headline "~/GTD/Personal.org" "Tasks")  "* TODO %?\n  %i  %T")
                                       ("c" "Computer-Tasks-TODO" entry (file+headline "~/GTD/Computer.org" "Tasks") "* TODO %?\n  %i  %T")
                                       ))
                               ;; 添加Babel编译的语言
                               (org-babel-do-load-languages
                                'org-babel-load-languages
                                '((python . t)
                                  (R . t)))
                               ;; pangu-spacing-mode
                               (pangu-spacing-mode)
                               (set (make-local-variable 'pangu-spacing-real-insert-separtor) t)
                               ))
  #+END_SRC
* window-numbering
  #+BEGIN_SRC emacs-lisp
    (window-numbering-mode 1)
  #+END_SRC
* Evil-mode
  快捷键：file:~/.emacs.d/init-keybindings.org::Evil-mode
  #+BEGIN_SRC emacs-lisp
    (evil-mode 1)
    (setcdr evil-insert-state-map nil)
    (define-key evil-insert-state-map [escape] 'evil-normal-state)
  #+END_SRC
* evil-leader
  evil-insert-state-leader-key: file:~/.emacs.d/init-keybindings.org::evil-insert-state-leader-key
  #+BEGIN_SRC emacs-lisp
    ;; 开启evil-leader模式
    (global-evil-leader-mode)

    ;; leader-key
    (evil-leader/set-leader "<SPC>")
    ;; (evil-leader/set-leader "M-m")
    ;; (setq evil-leader/in-all-states t)

    ;; 设置快捷键
    (evil-leader/set-key
      "ff" 'find-file
      "bb" 'switch-to-buffer
      "bk" 'kill-this-buffer
      "pg" 'counsel-git
      "ps" 'helm-do-ag-project-root
      "0"  'select-window-0
      "1"  'select-window-1
      "2"  'select-window-2
      "3"  'select-window-3
      "w/" 'split-window-right
      "w-" 'split-window-below
      ":"  'counsel-M-x
      "wm" 'delete-other-windows
      "ppp" 'pyim-convert-pinyin-at-point
      "ppd" 'pyim-delete-word-from-personal-buffer
      "ppcp" 'pyim-create-word-at-point
      "ppcs" 'pyim-create-word-from-selection
      "clt"  'chongliang/timestamp
      "clo"  'chongliang/org-to-elc
      "<tab>" 'mode-line-other-buffer ;; switch to last buffer
      "clis" 'chongliang/isend-shell
      )
    (evil-leader/set-key-for-mode 'markdown-mode
      "clrr" 'chongliang/render-rmd)
    (evil-leader/set-key-for-mode 'ess-mode
      "clrr" 'chongliang/render-rmd)
  #+END_SRC
* evil-surround
  #+BEGIN_SRC emacs-lisp
    (require 'evil-surround)
    (global-evil-surround-mode)
  #+END_SRC
* Evil-nerd-commenter
  快捷键：file:~/.emacs.d/init-keybindings.org::Evil-nerd-commenter
* which-key
  #+BEGIN_SRC emacs-lisp
    (which-key-mode 1)
  #+END_SRC
* helm-ag
  快捷键：file:~/.emacs.d/init-keybindings.org::helm-ag
* yasnippet
  #+BEGIN_SRC emacs-lisp
    (require 'yasnippet)
    (yas-global-mode 1)
    (setq yas-indent-line nil)
  #+END_SRC
* auto-yasnippet
  快捷键：file:~/.emacs.d/init-keybindings.org::auto-yasnippet
* r-autoyas
  #+BEGIN_SRC emacs-lisp
    (add-hook 'ess-mode-hook
              '(lambda()
                 (require 'r-autoyas)
                 ;; 保留参数名称
                 (setq r-autoyas-remove-explicit-assignments nil)
                 ;; 多少个参数后，每个参数折行
                 (setq r-autoyas-number-of-commas-before-return 10)
                 ;; (setq r-autoyas-auto-expand-with-paren t)
                 ;; 调用r-autoyas
                 'r-autoyas-ess-activate))
  #+END_SRC

* ESS
  快捷键：file:~/.emacs.d/init-keybindings.org::-yasnippet
  chongliang/ess-eval-line-or-region：file:~/.emacs.d/init-functions.org::chongliang/ess-eval-line-or-region
  #+BEGIN_SRC emacs-lisp
    (add-hook 'ess-mode-hook
              '(lambda()
                 (add-hook 'write-file-functions
                           (lambda ()
                             (ess-nuke-trailing-whitespace)))
                 (setq ess-nuke-trailing-whitespace-p t)
                 (setq ess-smart-operators t)
                 (defun chongliang/render-rmd ()
                   (interactive)
                   (save-buffer)
                   (let (file-name file-name2)
                     (setq file-name (buffer-file-name))
                     (setq file-name-2 (substring file-name 0 (- (length file-name) 4)))
                     (save-window-excursion
                       (ess-switch-to-ESS t)
                       (insert (format "rmarkdown::render(\"%s\")" file-name))
                       (inferior-ess-send-input)
                       (ess-wait-for-process)
                       (end-of-buffer)
                       (cond ((re-search-backward ".pdf" (- (point-max) 50) t)
                              (shell-command (format "firefox %s.pdf" file-name-2)))
                             ((re-search-backward ".html" (- (point-max) 50) t)
                              (shell-command (format "firefox %s.html" file-name-2)))
                             (t (message "error in rendering"))))))
                 ))
  #+END_SRC
** ess assign key
   file:~/.emacs.d/init-keybindings.org::ESS
** inferior-ess-mode
   #+BEGIN_SRC emacs-lisp
     (add-hook 'inferior-ess-mode-hook
               '(lambda()
                  (add-hook 'write-file-functions
                            (lambda ()
                              (ess-nuke-trailing-whitespace)))
                  (setq ess-nuke-trailing-whitespace-p t)
                  (setq ess-smart-operators t)))
     ;; (add-hook 'inferior-ess-mode-hook 'electric-spacing-mode)
   #+END_SRC
* ploymode
  #+BEGIN_SRC emacs-lisp
    (require 'poly-R)
    (require 'poly-markdown)
    (add-to-list 'auto-mode-alist '("\\.Rmd" . poly-markdown+r-mode))
  #+END_SRC
* flycheck
  #+BEGIN_SRC emacs-lisp
    (global-flycheck-mode)
  #+END_SRC
* markdown-mode
  #+BEGIN_SRC emacs-lisp
    (autoload 'markdown-mode
      "markdown-mode" "Major mode for editing Markdown files" t)
    (add-to-list 'auto-mode-alist'("'\.markdown\'" . markdown-mode))
    (add-to-list 'auto-mode-alist'("'\.md\'" . markdown-mode))
  #+END_SRC
* bash-completion
  #+BEGIN_SRC emacs-lisp
    (autoload 'bash-completion-dynamic-complete
      "bash-completion"
      "BASH completion hook")
    (add-hook 'shell-dynamic-complete-functions
      'bash-completion-dynamic-complete)
  #+END_SRC
* chinese-pyim
  快捷键1：file:~/.emacs.d/init-keybindings.org::chinese-pyim
  快捷键2：file:~/.emacs.d/init-packages.org::evil-leader
  #+BEGIN_SRC emacs-lisp
    (require 'chinese-pyim)

    ;; use basedict
    (require 'chinese-pyim-basedict)
    (chinese-pyim-basedict-enable)

    ;; dafault input method`'
    (setq-default default-input-method "chinese-pyim")

    ;; integrate and improve company-mode
    (require 'chinese-pyim-company)
    (setq pyim-company-max-length 6)

    ;; isearch can use pinyin
    (setq pyim-isearch-enable-pinyin-search t)

    ;; english input switch
    (setq-default pyim-english-input-switch-functions
                  '(pyim-probe-dynamic-english pyim-probe-isearch-mode))

    ;; punctuation-half-width
    (setq-default pyim-punctuation-half-width-functions
                  '(pyim-probe-punctuation-after-punctuation pyim-probe-punctuation-line-beginning))
  #+END_SRC
** chinese-pyim-shift-space
   #+BEGIN_SRC emacs-lisp
     (defun chongliang/chinese-pyim-shift-space ()
       "全角、半角符号转换和拼音－汉字转换，整合 chinese-pyim 中的 (pyim-punctuation-translate-at-point) 和 (pyim-convert-pinyin-at-point)"
       (interactive)
       (if (string-match (char-to-string (preceding-char)) ",./$，。、￥") ;  ",./，。、"为需要切换全角、半角的标点符号
           (pyim-punctuation-translate-at-point)
         (pyim-convert-pinyin-at-point)))
     ;; (global-set-key (kbd "S-<SPC>") 'chongliang/chinese-pyim-shift-space)
   #+END_SRC

* electric-operator
  #+BEGIN_SRC emacs-lisp
    (require 'electric-operator)
    ;; ess(R)
    (add-hook 'ess-mode-hook #'electric-operator-mode)
    (electric-operator-add-rules-for-mode 'ess-mode
                                          (cons "?" "?")
                                          (cons "=" " = "))
    (add-hook 'inferior-ess-mode-hook #'electric-operator-mode)
    (electric-operator-add-rules-for-mode 'inferior-ess-mode
                                          (cons "?" "?")
                                          (cons "=" " = "))
    ;; C++
    (add-hook 'c++-mode-hook #'electric-operator-mode)
    ;; python
    (add-hook 'python-mode-hook #'electric-operator-mode)
    (apply #'electric-operator-add-rules-for-mode 'ein-mode electric-operator-prose-rules)
  #+END_SRC
* python-mode
  https://github.com/proofit404/anaconda-mode
  #+BEGIN_SRC emacs-lisp
    (add-hook 'python-mode-hook 'anaconda-mode)
    (add-hook 'python-mode-hook 'anaconda-eldoc-mode)
  #+END_SRC
* ein
  https://tkf.github.io/emacs-ipython-notebook/#id24
  #+BEGIN_SRC emacs-lisp
    (require 'ein)
    (add-hook 'ein-mode-hook 'anaconda-mode)
    (add-hook 'ein-mode-hook 'anaconda-eldoc-mode)
  #+END_SRC
